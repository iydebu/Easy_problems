OPTIMAL TREVERSING

We have a optimal treversing solution of this problem. We have a sorted 2D array ,
first we have to find the row in which our element maybe possible present
,then we have traverse in the row to find the our target element,if it is present we return true else false.

Example:
we have a 2D array of 3X3
1 2 3
4 5 6
7 8 9

target element: 5
first intilize the i(row) and j(column)
->we have a while loop which checks the i<m and j>=0
->if we have mat[i][j] == target element then return true
->if we have mat[i][j] > i then it mean it probably liew left on the row so j--
->else it means this row is not contain our target element so i++

if while loop over it means element is not present in the 2d array return false

Time Complexity
O(N)

Space Complexity
O(1)

Since, we are not using any extra space to find the number of pairs. Therefore, the overall space complexity will be O(1).
