Moore's Voting Algorithm Approach:

The idea is to use modifications to Moore's voting algorithm to find candidate elemnts that may occur more than N/3 times in the given array.
We will use the fact that if  we remove 3 distinct elements from the array, the elements which occured more than N/3 times do not change.

The steps are as follows:
1. We can prove using the pigeonhole principle that there are at most 2 elements possible that occur more than n/3 times , we will use the variable 'First_candidate' to store
First_candidate to store the first element that can occur more than n/3 times and another variable
second candidate to store the second element that can occur more than n/3 times.Also we will use the variables
first count and second count both will intialized to 0 to store teh frequency of the first candidate and second candidate respectively

2. Iterate through the array, lets say our current element is arr[i]
    1. if arr[i] is equal to first candidate then increment first count by 1
    2. if arr[i] is equal to second candidate then increment second count by 1
    3. otherwise if first count is equal to 0 set first_candidate equal to arrp[i] and increment first count to 1
    4. else if second count is equal to 0 set second_candidate equal to arrp[i] and increment second count to 1
    5. else decrease both first_count and second_count by 1

3. Iterate through the array once again and count the number of occurence of first candidate and second candidate

4 Store first_candidate in the answer if it occur more than n/3 times in the given array, similarly add second_candidate
to the answer if it occur more than n/3 times in the given array

5. return the stored element

Time complexity : O(n)

Space complexity : O(1)